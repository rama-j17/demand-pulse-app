# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V3-gBe8BBp0NMIE1UbFHD8PnkF2QxnFh
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from prophet.plot import plot_plotly
from utils import load_model, make_forecast

# 🎯 Page config
st.set_page_config(page_title="DemandPulse", layout="wide")

# 🚀 Title and description
st.title("📈 DemandPulse: Sales Forecasting and Optimization")
st.markdown("""
Welcome to **DemandPulse**, your intelligent sales forecasting assistant!
Built using **Facebook Prophet**, it helps you:
- Forecast future sales trends
- Visualize growth patterns
- Optimize demand planning

*Let's plan better, together.*
""")

# 📤 Load trained model
with st.spinner("Loading forecasting model..."):
    model = load_model()

# 🎛️ User input
st.sidebar.header("Forecast Settings")
periods = st.sidebar.slider("Days to forecast", 7, 90, 30)

# 🔮 Make forecast
forecast = make_forecast(model, periods)

# 📊 Forecast plot
st.subheader("Sales Forecast (Interactive)")
fig = plot_plotly(model, forecast)
st.plotly_chart(fig, use_container_width=True)

# 🧾 Show forecast table
st.subheader("Forecasted Sales Data")
st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(periods).reset_index(drop=True))

# 📈 Component plot (seasonality, trend)
with st.expander("📉 View Trend & Seasonality Components"):
    from prophet.plot import plot_components_plotly
    components_fig = plot_components_plotly(model, forecast)
    st.plotly_chart(components_fig, use_container_width=True)

# 📌 Footer
st.markdown("---")
st.markdown("🧠 Built with Facebook Prophet • 🚀 Deployed with Streamlit")